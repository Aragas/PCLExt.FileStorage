using NUnit.Framework;

using PCLExt.FileStorage.Extensions;

using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#if WINDOWS_UWP
using TestFixtureAttr = Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute;
using TestAttr = Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute;
#else
using TestFixtureAttr = NUnit.Framework.TestFixtureAttribute;
using TestAttr = NUnit.Framework.TestAttribute;
#endif

namespace PCLExt.FileStorage.Test.File
{
    [TestFixture]
    public class FileOpenTest : BaseFileTest
    {
        [TestAttr]
        public void OpenRead() => OpenReadCoreAsync(true, CancellationToken.None).RunSync();
        [TestAttr]
        public async Task OpenReadAsync() => await OpenReadCoreAsync(false, CancellationToken.None);
        private async Task OpenReadCoreAsync(bool sync, CancellationToken cancellationToken)
        {
            var file = sync
                ? TestFolder.CreateFile(FileName1, CreationCollisionOption.FailIfExists)
                : await TestFolder.CreateFileAsync(FileName1, CreationCollisionOption.FailIfExists, cancellationToken);

            var data = new byte[4 * 1024 * 1024];
            new Random().NextBytes(data);
            if (sync)
                file.WriteAllBytes(data);
            else
                await file.WriteAllBytesAsync(data);

            using var stream = sync ? file.Open(FileAccess.Read) : await file.OpenAsync(FileAccess.Read);
            var newData = new byte[data.Length];
            stream.Read(newData, 0, newData.Length);
            Assert.IsTrue(data.SequenceEqual(newData));
        }

        [TestAttr]
        public void OpenReadTryWrite() => OpenReadTryWriteCoreAsync(true, CancellationToken.None).RunSync();
        [TestAttr]
        public async Task OpenReadTryWriteAsync() => await OpenReadTryWriteCoreAsync(false, CancellationToken.None);
        private async Task OpenReadTryWriteCoreAsync(bool sync, CancellationToken cancellationToken)
        {
            var file = sync
                ? TestFolder.CreateFile(FileName1, CreationCollisionOption.FailIfExists)
                : await TestFolder.CreateFileAsync(FileName1, CreationCollisionOption.FailIfExists, cancellationToken);

            using var stream = sync ? file.Open(FileAccess.Read) : await file.OpenAsync(FileAccess.Read);
            Assert.That(() => stream.WriteByte(0), Throws.TypeOf<NotSupportedException>());
        }

        [TestAttr]
        public void OpenReadWrite() => OpenReadWriteCoreAsync(true, CancellationToken.None).RunSync();
        [TestAttr]
        public async Task OpenReadWriteAsync() => await OpenReadWriteCoreAsync(false, CancellationToken.None);
        private async Task OpenReadWriteCoreAsync(bool sync, CancellationToken cancellationToken)
        {
            var file = sync
                ? TestFolder.CreateFile(FileName1, CreationCollisionOption.FailIfExists)
                : await TestFolder.CreateFileAsync(FileName1, CreationCollisionOption.FailIfExists, cancellationToken);

            var data = new byte[4 * 1024 * 1024];
            new Random().NextBytes(data);

            using var stream = sync ? file.Open(FileAccess.ReadAndWrite) : await file.OpenAsync(FileAccess.ReadAndWrite);
            stream.Write(data, 0, data.Length);
            stream.Flush();
            stream.Seek(0, SeekOrigin.Begin);

            var newData = new byte[data.Length];
            stream.Read(newData, 0, newData.Length);
            Assert.IsTrue(data.SequenceEqual(newData));
        }

        [TestAttr]
        public void OpenUnknown() => OpenUnknownCoreAsync(true, CancellationToken.None).RunSync();
        [TestAttr]
        public async Task OpenUnknownAsync() => await OpenUnknownCoreAsync(false, CancellationToken.None);
        private async Task OpenUnknownCoreAsync(bool sync, CancellationToken cancellationToken)
        {
            var file = sync
                ? TestFolder.CreateFile(FileName1, CreationCollisionOption.FailIfExists)
                : await TestFolder.CreateFileAsync(FileName1, CreationCollisionOption.FailIfExists, cancellationToken);

            if (sync)
                Assert.That(() => file.Open((FileAccess) 2), Throws.ArgumentException);
            else
                Assert.That(() => file.OpenAsync((FileAccess) 2), Throws.ArgumentException);
        }
    }
}